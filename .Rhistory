data_emissions_train <- data_emissions # train data from the previous steps.
data_emissions_test <- read.csv("gas_test.csv", header = TRUE)
sum(is.na(data_emissions_test))
ggplot
?ggplot
sum(is.na(data_emissions_test)) # any missing value?
data_emissions_test <- data_emissions_test[!((data_emissions_test$TIT %in% outlier_TIT) |(data_emissions_test$CO %in% outlier_CO) |(data_emissions_test$NOX %in% outlier_NOX)),]
data_emissions_test <- data_emissions_test[,vars_selected]
Model_1 <- lm(TEY ~ .,
data = data_emissions_train %>%
dplyr::select(all_of(vars_selected))) # training the model
summary(Model_1)
Model_1 <- lm(TEY ~ .,
data = data_emissions_train %>%
dplyr::select(all_of(vars_selected))) # training the model
summary(Model_1)
Model_2 <- lm(TEY ~ .,
data = data_emissions_train %>%
dplyr::select(all_of(vars_selected))) # training the model
summary(Model_2)
Model_3 <- lm(TEY ~ .,
data = data_emissions_train %>%
dplyr::select(all_of(vars_selected))) # training the model
summary(Model_3)
Model_4 <- lm(TEY ~ .,
data = data_emissions_train %>%
dplyr::select(all_of(vars_selected))) # training the model
summary(Model_4)
sum(is.na(data_emissions_test)) # any missing value?
data_emissions_test <- data_emissions_test[!((data_emissions_test$TIT %in% outlier_TIT) |(data_emissions_test$CO %in% outlier_CO) |(data_emissions_test$NOX %in% outlier_NOX)),]
data_emissions_test <- data_emissions_test[,vars_selected]
model_1fitted <- predict(Model_1,
data_emissions_train)
model_2fitted <- predict(Model_2,
data_emissions_train)
model_3fitted <- predict(Model_3,
data_emissions_train)
model_4fitted <- predict(Model_4,
data_emissions_train)
# data_emissions_fitted <- predict(Model_1,
#                                data_emissions_train,
#                                "response",
#                                type = "prob") #forecast probabilities for
# # individual levels of a dependent variable
hist_model1 <- hist(Model_1$residuals, breaks = 30, plot = FALSE)
hist_model2 <- hist(Model_2$residuals, breaks = 30, plot = FALSE)
hist_model3 <- hist(Model_3$residuals, breaks = 30, plot = FALSE)
hist_model4 <- hist(Model_4$residuals, breaks = 30, plot = FALSE)
plot(hist_model1, col = c1)
hist_model1 <- hist(Model_1$residuals, breaks = 30, plot = FALSE)
hist_model2 <- hist(Model_2$residuals, breaks = 30, plot = FALSE)
hist_model3 <- hist(Model_3$residuals, breaks = 30, plot = FALSE)
hist_model4 <- hist(Model_4$residuals, breaks = 30, plot = FALSE)
plot(hist_model1, col = "red")
plot(hist_model2, col = "black", add = TRUE)
plot(hist_model3, col = "yellow", add = TRUE)
plot(hist_model4, col = "green", add = TRUE)
plot(hist_model1, col = "red")
plot(hist_model2, col = "black", add = TRUE)
plot(hist_model3, col = "yellow", add = TRUE)
plot(hist_model4, col = "green", add = TRUE)
plot(hist_model1, col = "red", add = TRUE)
plot.new(hist_model1, col = "red")
residuals <- as.data.frame(Model_1$residuals,Model_2$residuals,Model_3$residuals,Model_4$residuals)
View(residuals)
residuals <- as.data.frame(m1 = Model_1$residuals,m2 =Model_2$residuals,m3 =Model_3$residuals,m4 =Model_4$residuals)
residuals <- as.data.frame(m1 = Model_1$residuals,m2 =Model_2$residuals,
m3=Model_3$residuals,m4 =Model_4$residuals)
residuals <- data.frame(m1 = Model_1$residuals,m2 =Model_2$residuals,
m3=Model_3$residuals,m4 =Model_4$residuals)
View(residuals)
ggplot(data = residuals) +
geom_histogram(aes(x = m1)) +
geom_histogram(aes(x = m2))+
geom_histogram(aes(x = m3))+
geom_histogram(aes(x = m4))
ggplot(data = residuals) +
geom_histogram(aes(x = m1),color = "#e9ecef") +
geom_histogram(aes(x = m2))+
geom_histogram(aes(x = m3))+
geom_histogram(aes(x = m4))
ggplot(data = residuals) +
geom_histogram(aes(x = m1)) +
geom_histogram(aes(x = m2))+
geom_histogram(aes(x = m3))+
geom_histogram(aes(x = m4),color = "#e9ecef")
res1 <- data.frame(residual = Model_1$residuals)
res2 <- data.frame(residual = Model_2$residuals)
res3 <- data.frame(residual = Model_3$residuals)
res4 <- data.frame(residual = Model_4$residuals)
res1$model <- 'm1';res2$model <- 'm2';res3$model <- 'm3';res4$model <- 'm4'
DF_residuals <- rbind(res1, res2,res3,res4)
ggplot(DF_residuals, aes(residual, fill = model)) + geom_density(alpha = 0.2)
# ggplot(data = residuals) +
#     geom_histogram(aes(x = m1)) +
#     geom_histogram(aes(x = m2))+
#     geom_histogram(aes(x = m3))+
#     geom_histogram(aes(x = m4),color = "#e9ecef")
#
# hist_model1 <- hist(Model_1$residuals, breaks = 30, plot = FALSE)
# hist_model2 <- hist(Model_2$residuals, breaks = 30, plot = FALSE)
# hist_model3 <- hist(Model_3$residuals, breaks = 30, plot = FALSE)
# hist_model4 <- hist(Model_4$residuals, breaks = 30, plot = FALSE)
#
# plot(hist_model1, col = "red")
# plot(hist_model2, col = "black", add = TRUE)
# plot(hist_model3, col = "yellow", add = TRUE)
# plot(hist_model4, col = "green", add = TRUE)
DF <- data.frame(real = data_emissions_train$TEY,predicted_1 = model_1fitted,
predicted_2 = model_2fitted, predicted_3 = model_3fitted,
predicted_4 = model_4fitted,time = 1:length(data_emissions_train$TEY))
p = ggplot() +
geom_line(data = DF, aes(x = time, y = real), color = "blue") +
geom_line(data = DF, aes(x = time, y = predicted_1), color = "red") +
geom_line(data = DF, aes(x = time, y = predicted_2), color = "green") +
geom_line(data = DF, aes(x = time, y = predicted_4), color = "yellow") +
geom_line(data = DF, aes(x = time, y = predicted_5), color = "black") +
xlab('time') +
ylab('Generator power output')+
ggtitle("Comparison of models")
print(p)
DF <- data.frame(real = data_emissions_train$TEY,predicted_1 = model_1fitted,
predicted_2 = model_2fitted, predicted_3 = model_3fitted,
predicted_4 = model_4fitted,time = 1:length(data_emissions_train$TEY))
p = ggplot() +
geom_line(data = DF, aes(x = time, y = real), color = "blue") +
geom_line(data = DF, aes(x = time, y = predicted_1), color = "red") +
geom_line(data = DF, aes(x = time, y = predicted_2), color = "green") +
geom_line(data = DF, aes(x = time, y = predicted_3), color = "yellow") +
geom_line(data = DF, aes(x = time, y = predicted_4), color = "black") +
xlab('time') +
ylab('Generator power output')+
ggtitle("Comparison of models")
print(p)
DF <- data.frame(real = data_emissions_train$TEY,predicted_1 = model_1fitted,
predicted_2 = model_2fitted, predicted_3 = model_3fitted,
predicted_4 = model_4fitted,time = 1:length(data_emissions_train$TEY))
p = ggplot() +
geom_line(data = DF, aes(x = time, y = real), color = "blue") +
geom_line(data = DF, aes(x = time, y = predicted_1), color = "red") +
geom_line(data = DF, aes(x = time, y = predicted_2), color = "green") +
geom_line(data = DF, aes(x = time, y = predicted_3), color = "yellow") +
geom_line(data = DF, aes(x = time, y = predicted_4), color = "black") +
labs(x = "time",
y = "Generator power output",
color = "Legend") +
ggtitle("Comparison of models")
print(p)
DF <- data.frame(real = data_emissions_train$TEY,predicted_1 = model_1fitted,
predicted_2 = model_2fitted, predicted_3 = model_3fitted,
predicted_4 = model_4fitted,time = 1:length(data_emissions_train$TEY))
p = ggplot() +
geom_line(data = DF, aes(x = time, y = real), color = "blue") +
geom_line(data = DF, aes(x = time, y = predicted_1*2), color = "red") +
geom_line(data = DF, aes(x = time, y = predicted_2*3), color = "green") +
geom_line(data = DF, aes(x = time, y = predicted_3*4), color = "yellow") +
geom_line(data = DF, aes(x = time, y = predicted_4*5), color = "black") +
labs(x = "time",
y = "Generator power output",
color = "Legend") +
ggtitle("Comparison of models")
print(p)
head(mtcars)
# check their correlation
cor(DF[,-c(1)],
DF$real)
# check their correlation
cor(DF[,-c(1,6)],
DF$real)
regressionMetrics <- function(real, predicted) {
# Mean Squera Error
MSE <- mean((real - predicted)^2)
# Root Mean Square Error
RMSE <- sqrt(MSE)
# Mean Absolute Error
MAE <- mean(abs(real - predicted))
# Mean Absolute Percentage Error
MAPE <- mean(abs(real - predicted)/real)
# Median Absolute Error
MedAE <- median(abs(real - predicted))
# Mean Logarithmic Absolute Error
MSLE <- mean((log(1 + real) - log(1 + predicted))^2)
# Total Sum of Squares
TSS <- sum((real - mean(real))^2)
# Explained Sum of Squares
RSS <- sum((predicted - real)^2)
# R2
R2 <- 1 - RSS/TSS
result <- data.frame(MSE, RMSE, MAE, MAPE, MedAE, MSLE, R2)
return(result)
}
regressionMetrics(DF$real$TEY,
predicted = DF$predicted_1) # model 1
regressionMetrics(DF$real,
predicted = DF$predicted_1) # model 1
regressionMetrics(DF$real,
DF$predicted_2) # model 2
regressionMetrics(DF$real,
DF$predicted_3) # model 3
regressionMetrics(DF$real,
DF$predicted_4) # model 4
rm_1 <- regressionMetrics(DF$real,
predicted = DF$predicted_1) # model 1
rm_2 <- regressionMetrics(DF$real,
DF$predicted_2) # model 2
rm_3 <- regressionMetrics(DF$real,
DF$predicted_3) # model 3
rm_4 <- regressionMetrics(DF$real,
DF$predicted_4) # model 4
rbind(rm_1,rm_2,rm_3,rm_4)
metrics <- rbind(rm_1,rm_2,rm_3,rm_4)
row.names(metrics) <- c("model1","model1","model1","model1")
row.names(metrics) <- c("model1","model2","model3","model4")
metrics
View(data_emissions_test)
x = model.matrix(TEY~., data_emissions_train) # trim off the first column
View(x)
x = model.matrix(TEY~., data_emissions_train)[,-1] # trim off the first column
View(x)
# leaving only the predictors
y = data_emissions_train %>%
select(TEY) %>%
unlist() %>%
as.numeric()
y = data_emissions_train$TEY%>%
unlist() %>%
as.numeric()
x_test = model.matrix(TEY~., data_emissions_test)[,-1] # trim off the first column
# leaving only the predictors
y_test = data_emissions_train$TEY%>%
unlist() %>%
as.numeric()
x_test = model.matrix(TEY~., data_emissions_test)[,-1] # trim off the first column
# leaving only the predictors
y_test = data_emissions_test$TEY%>%
unlist() %>%
as.numeric()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
requiredPackages = c("janitor","verification","olsrr","DescTools","caret","tibble","purrr","corrplot","corrplot","dbplyr","dplyr","readr", "ggplot2")
for(i in requiredPackages){if(!require(i,character.only = TRUE)) install.packages(i)}
for(i in requiredPackages){if(!require(i,character.only = TRUE)) library(i,character.only = TRUE)}
setwd("~/sem 2/Machine Learning 1/project/regression/pp_gas_emission")
data_emissions <- read.csv("gas_train.csv", header = TRUE)
head(data_emissions,6) # the top 6 rows
str(data_emissions)
# remove more columns
sum(is.na(data_emissions))
summary(data_emissions)
# glimpse(data_emissions)
library(reshape)
meltData <- melt(data_emissions)
p <- ggplot(meltData, aes(factor(variable), value))
p + geom_boxplot() + facet_wrap(~variable, scale="free")
outlier_TIT <- boxplot(data_emissions$TIT,data = data_emissions)$out
outlier_CO <- boxplot(data_emissions$CO,data = data_emissions)$out
outlier_NOX <- boxplot(data_emissions$NOX,data = data_emissions)$out
data_emissions_clean <- data_emissions[!((data_emissions$TIT %in% outlier_TIT) |(data_emissions$CO %in% outlier_CO) |(data_emissions$NOX %in% outlier_NOX)),]
# distribution of the dependent variable:- TEY
ggplot(data_emissions,
aes(x = TEY)) +
geom_histogram(fill = "blue",
bins = 100) +
theme_bw()
sapply(data_emissions,
function(x)
unique(x) %>%
length()) %>%
sort()
vars_selected <-names(data_emissions)
var_to_remove <- nearZeroVar(data_emissions,
names = TRUE)
var_to_remove
data_emissions_correlations <- cor(data_emissions,
use = "pairwise.complete.obs")
data_emissions_cor_order <-
data_emissions_correlations[,"TEY"] %>%
sort(decreasing = TRUE) %>% # sort the correlations with TEY in decreasing order
names()
# using the 30 most correlated variables
corrplot.mixed(data_emissions_correlations[data_emissions_cor_order,
data_emissions_cor_order],
upper = "square",
lower = "number",
tl.col = "black",
tl.pos = "lt")
vars_to_remove <- findCorrelation(data_emissions_correlations[-8,-8],
cutoff = 0.9, # threshold
names = TRUE)
vars_selected <- names(data_emissions)[
!names(data_emissions) %in% vars_to_remove
]
data_emissions <- data_emissions[,vars_selected]
( findLinearCombos(data_emissions) ->
data_emissions_linearCombos )
modelWithallVars <- lm(TEY ~ .,
data = data_emissions %>%
dplyr::select(all_of(vars_selected))) #
Model_varsRemoved <- ols_step_backward_p(modelWithallVars,
prem = 0.05, # p-value threshold
progress = FALSE) # hide progress
vars_to_remove <- Model_varsRemoved$removed
vars_selected <- vars_selected[!vars_selected %in% vars_to_remove]
data_emissions_train <- data_emissions # train data from the previous steps.
data_emissions_test <- read.csv("gas_test.csv", header = TRUE)
Model_SimpleRegr <- lm(TEY ~ .,
data = data_emissions_train %>%
dplyr::select(all_of(vars_selected))) # training the model
summary(Model_SimpleRegr)
x_train = model.matrix(TEY~., data_emissions_train)[,-1] # trim off the first column
# leaving only the predictors
y_train = data_emissions_train$TEY%>%
unlist() %>%
as.numeric()
grid = 10^seq(10, -2, length = 100)
Model_ridge <- glmnet(x_train, y_train, alpha = 0, lambda = grid) # alpha = o for ridge model
requiredPackages = c("janitor","verification","olsrr","DescTools","caret","tibble","purrr","corrplot","corrplot","dbplyr","dplyr","readr", "ggplot2", "glmnet")
for(i in requiredPackages){if(!require(i,character.only = TRUE)) install.packages(i)}
for(i in requiredPackages){if(!require(i,character.only = TRUE)) library(i,character.only = TRUE)}
grid = 10^seq(10, -2, length = 100)
Model_ridge <- glmnet(x_train, y_train, alpha = 0, lambda = grid) # alpha = o for ridge model
summary(Model_ridge)
Model_lasso <- glmnet(x_train,
y_train,
alpha = 1,
lambda = grid) # Fit lasso model on training data
summary(Model_lasso)
# Set training control
train_cont <- trainControl(method = "repeatedcv",
number = 10,
repeats = 5,
search = "random",
verboseIter = TRUE)
# Train the model
Model_ENR <- train(TEY ~ .,
data = data_emissions_train,
method = "glmnet",
preProcess = c("center", "scale"),
tuneLength = 10,
trControl = train_cont)
# Best tuning parameter
Model_ENR$bestTune
set.seed(1)
cv.out = cv.glmnet(x_train, y_train, alpha = 0) # Fit ridge regression model
bestlam = cv.out$lambda.min  # Select lamda that minimizes training MSE
bestlam
set.seed(1)
cv.out = cv.glmnet(x_train, y_train, alpha = 1) # Fit ridge regression model
bestlam2 = cv.out$lambda.min  # Select lamda that minimizes training MSE
bestlam2
sum(is.na(data_emissions_test)) # any missing value?
data_emissions_test <- data_emissions_test[!((data_emissions_test$TIT %in% outlier_TIT) |(data_emissions_test$CO %in% outlier_CO) |(data_emissions_test$NOX %in% outlier_NOX)),]
data_emissions_test <- data_emissions_test[,vars_selected]
x_test = model.matrix(TEY~., data_emissions_test)[,-1] # trim off the first column
# leaving only the predictors
y_test = data_emissions_test$TEY%>%
unlist() %>%
as.numeric()
Model_SimpleRegrfitted <- predict(Model_SimpleRegr,
data_emissions_train)
Model_ridgefitted <- predict(Model_ridge, s = bestlam, newx = x_test)
Model_lassofitted <- predict(Model_lasso, s = bestlam2, newx = x_test)
Model_ENRfitted <- predict(Model_ENR, x_test)
# data_emissions_fitted <- predict(Model_SimpleRegr,
#                                data_emissions_train,
#                                "response",
#                                type = "prob") #forecast probabilities for
# # individual levels of a dependent variable
res1 <- data.frame(residual = Model_SimpleRegr$residuals)
res2 <- data.frame(residual = Model_ridge$residuals)
res3 <- data.frame(residual = Model_lasso$residuals)
res4 <- data.frame(residual = Model_ENR$residuals)
res1$model <- 'm1';res2$model <- 'm2';res3$model <- 'm3';res4$model <- 'm4'
Model_SimpleRegr$residuals
res1 <- data.frame(residual = Model_SimpleRegr$residuals)
res2 <- data.frame(residual = Model_ridge$residuals)
res3 <- data.frame(residual = Model_lasso$residuals)
res2 <- data.frame(residual = Model_ridge$residuals)
Model_ridge$residuals
str(Model_ridge)
res2 <- data.frame(residual = Model_ridgefitted - y_test)
y_test
length(y_test)
str(Model_SimpleRegrfitted)
Model_SimpleRegrfitted
length(Model_SimpleRegrfitted)
Model_SimpleRegrfitted <- predict(Model_SimpleRegr,
data_emissions_test)
res1 <- data.frame(residual = Model_SimpleRegr$residuals)
res1 <- data.frame(residual = Model_SimpleRegrfitted - y_test)
res2 <- data.frame(residual = Model_ridgefitted - y_test)
res3 <- data.frame(residual = Model_lassofitted - y_test)
res4 <- data.frame(residual = Model_ENRfitted - y_test)
res1$model <- 'm1';res2$model <- 'm2';res3$model <- 'm3';res4$model <- 'm4'
DF_residuals <- rbind(res1, res2,res3,res4)
View(res1)
View(res2)
View(res3)
View(res4)
DF_residuals <- rbind(res1, res2,res3,res4)
res3 <- data.frame(residual = Model_lassofitted - y_test)
View(res3)
Model_lassofitted
head(Model_lassofitted)
res2 <- data.frame(residual = Model_ridgefitted - y_test) %>% rename(X1 = residual)
x = y = 2
x
y
colnames(res2) = colnames(res3) =  c("residual","model")
colnames(res2) <- c("residual","model")
colnames(res3) <- c("residual","model")
res3 <- data.frame(residual = Model_lassofitted - y_test)
res1$model <- 'm1';res2$model <- 'm2';res3$model <- 'm3';res4$model <- 'm4'
colnames(res3) <- c("residual","model")
DF_residuals <- rbind(res1, res2,res3,res4)
ggplot(DF_residuals, aes(residual, fill = model)) + geom_density(alpha = 0.2)
DF <- data.frame(real = data_emissions_train$TEY,predicted_1 = Model_SimpleRegrfitted,
predicted_2 = Model_ridgefitted, predicted_3 = Model_lassofitted,
predicted_4 = Model_ENRfitted,time = 1:length(data_emissions_train$TEY))
DF <- data.frame(real = y_test,predicted_1 = Model_SimpleRegrfitted,
predicted_2 = Model_ridgefitted, predicted_3 = Model_lassofitted,
predicted_4 = Model_ENRfitted,time = 1:length(data_emissions_train$TEY))
length(y_test)
length(Model_SimpleRegrfitted)
DF <- data.frame(real = y_test,predicted_1 = Model_SimpleRegrfitted,
predicted_2 = Model_ridgefitted, predicted_3 = Model_lassofitted,
predicted_4 = Model_ENRfitted,time = 1:length(y_test))
p = ggplot() +
geom_line(data = DF, aes(x = time, y = real), color = "blue") +
geom_line(data = DF, aes(x = time, y = predicted_1), color = "red") +
geom_line(data = DF, aes(x = time, y = predicted_2), color = "green") +
geom_line(data = DF, aes(x = time, y = predicted_3), color = "yellow") +
geom_line(data = DF, aes(x = time, y = predicted_4), color = "black") +
labs(x = "time",
y = "Generator power output",
color = "Legend") +
ggtitle("Comparison of models")
print(p)
DF <- data.frame(real = y_test,predicted_1 = Model_SimpleRegrfitted,
predicted_2 = Model_ridgefitted, predicted_3 = Model_lassofitted,
predicted_4 = Model_ENRfitted,time = 1:length(y_test))
p = ggplot() +
geom_line(data = DF, aes(x = time, y = real), color = "blue") +
geom_line(data = DF, aes(x = time, y = predicted_1), color = "red") +
geom_line(data = DF, aes(x = time, y = predicted_2), color = "green") +
geom_line(data = DF, aes(x = time, y = predicted_3), color = "yellow") +
geom_line(data = DF, aes(x = time, y = predicted_4), color = "black") +
labs(x = "time",
y = "Generator power output",
color = "Legend") +
ggtitle("Comparison of models")
print(p)
View(DF)
colnames(DF) <- c("real","predicted_1","predicted_2","predicted_3","predicted_4","time")
p = ggplot() +
geom_line(data = DF, aes(x = time, y = real), color = "blue") +
geom_line(data = DF, aes(x = time, y = predicted_1), color = "red") +
geom_line(data = DF, aes(x = time, y = predicted_2), color = "green") +
geom_line(data = DF, aes(x = time, y = predicted_3), color = "yellow") +
geom_line(data = DF, aes(x = time, y = predicted_4), color = "black") +
labs(x = "time",
y = "Generator power output",
color = "Legend") +
ggtitle("Comparison of models")
print(p)
cor(DF[,-c(1,6)],
DF$real)
regressionMetrics <- function(real, predicted) {
# Mean Squera Error
MSE <- mean((real - predicted)^2)
# Root Mean Square Error
RMSE <- sqrt(MSE)
# Mean Absolute Error
MAE <- mean(abs(real - predicted))
# Mean Absolute Percentage Error
MAPE <- mean(abs(real - predicted)/real)
# Median Absolute Error
MedAE <- median(abs(real - predicted))
# Mean Logarithmic Absolute Error
MSLE <- mean((log(1 + real) - log(1 + predicted))^2)
# Total Sum of Squares
TSS <- sum((real - mean(real))^2)
# Explained Sum of Squares
RSS <- sum((predicted - real)^2)
# R2
R2 <- 1 - RSS/TSS
result <- data.frame(MSE, RMSE, MAE, MAPE, MedAE, MSLE, R2)
return(result)
}
rm_1 <- regressionMetrics(DF$real,
predicted = DF$predicted_1) # model 1
rm_2 <- regressionMetrics(DF$real,
DF$predicted_2) # model 2
rm_3 <- regressionMetrics(DF$real,
DF$predicted_3) # model 3
rm_4 <- regressionMetrics(DF$real,
DF$predicted_4) # model 4
metrics <- rbind(rm_1,rm_2,rm_3,rm_4)
row.names(metrics) <- c("model1","model2","model3","model4")
metrics
metrics
metrics <- rbind(rm_1,rm_2,rm_3,rm_4)
row.names(metrics) <- c("Model_SimpleRegr","Model_ridge","Model_lasso","Model_ENR")
metrics
metrics
setwd("~/sem 2/Machine Learning 1/project/regression/pp_gas_emission")
setwd("~/sem 2/Machine Learning 1/project/regression/pp_gas_emission")
?boxplot
setwd("~/sem 2/Machine Learning 1/project/regression/pp_gas_emission")
setwd("~/sem 2/Machine Learning 1/project/regression/pp_gas_emission")
setwd("~/sem 2/Machine Learning 1/project/regression/pp_gas_emission")
